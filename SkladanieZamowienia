package jsf;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.List;

import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;
import javax.faces.bean.SessionScoped;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.PersistenceUnit;

import sklep.model.ElementKoszyka;
import sklep.model.ElementZamowienia;
import sklep.model.ElementZamowieniaPK;
import sklep.model.Zamowienie;
import sklep.model.Towar;

@ManagedBean(name="zam")
@SessionScoped
public class SkladanieZamowienia {
	private Zamowienie zamowienie;
	
	@PersistenceUnit
	private EntityManagerFactory emf;
	
	@ManagedProperty("#{koszyk}")
	private Koszyk koszyk;
	
	public SkladanieZamowienia() {
		zamowienie = new Zamowienie();
	}

	public Koszyk getKoszyk() {
		return koszyk;
	}

	public void setKoszyk(Koszyk koszyk) {
		this.koszyk = koszyk;
	}

	public Zamowienie getZamowienie() {
		return zamowienie;
	}

	public void setZamowienie(Zamowienie zamowienie) {
		this.zamowienie = zamowienie;
	}

	public Integer getIdZamowienia() {
		return zamowienie.getIdZamowienia();
	}

	public void setIdZamowienia(Integer idZamowienia) {
		zamowienie.setIdZamowienia(idZamowienia);
	}

	public Timestamp getDataZlozenia() {
		return zamowienie.getDataZlozenia();
	}

	public void setDataZlozenia(Timestamp dataZlozenia) {
		zamowienie.setDataZlozenia(dataZlozenia);
	}

	public BigDecimal getDoZaplaty() {
		return zamowienie.getDoZaplaty();
	}

	public void setDoZaplaty(BigDecimal doZaplaty) {
		zamowienie.setDoZaplaty(doZaplaty);
	}

	public String getKodPocztowy() {
		return zamowienie.getKodPocztowy();
	}

	public void setKodPocztowy(String kodPocztowy) {
		zamowienie.setKodPocztowy(kodPocztowy);
	}

	public String getMiasto() {
		return zamowienie.getMiasto();
	}

	public void setMiasto(String miasto) {
		zamowienie.setMiasto(miasto);
	}

	public String getOdbiorca() {
		return zamowienie.getOdbiorca();
	}

	public void setOdbiorca(String odbiorca) {
		zamowienie.setOdbiorca(odbiorca);
	}

	public String getUlicaINumer() {
		return zamowienie.getUlicaINumer();
	}

	public void setUlicaINumer(String ulicaINumer) {
		zamowienie.setUlicaINumer(ulicaINumer);
	}

	public List<ElementZamowienia> getElementyZamowienia() {
		return zamowienie.getElementyZamowienia();
	}
	
	public void zapisz() {
		System.out.println("ZapisujÄ™ zamĂłwienie");
		zamowienie.setDoZaplaty(new BigDecimal(150));
		
		EntityManager em = emf.createEntityManager();
		em.getTransaction().begin();
		for(ElementKoszyka ek : koszyk.getZawartoscKoszyka()) {
			
			ElementZamowienia ez = new ElementZamowienia();
			ez.setZamowienie(zamowienie);
			ez.setTowar(em.find(Towar.class, ek.getIdTowaru()));
			ez.setIlosc(ek.getIleSztuk());
			em.persist(ez);
			zamowienie.addElementyZamowienia(ez);
		}
		
		em.persist(zamowienie);
		em.getTransaction().commit();
		System.out.println("Zapisane");
		em.close();
		
		zamowienie = new Zamowienie();
	}
}
